/**
 * Root Project
 */
buildscript {
    ext {
        querydsl = "5.0.0"
        cronUtils = "9.2.0"
        commonsIo = "2.11.0"
        commonsText = "1.9"
        commonsLang3 = "3.12.0"
        springBoot = "2.6.11"
        springBootDependency = "1.0.11.RELEASE"
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBoot}")
        classpath("io.spring.gradle:dependency-management-plugin:${springBootDependency}")
    }
}

/**
 * Spring 프로젝트 의존성 설정
 */
def springProjects = [
    project(":module-core"),
    project(":module-remote"),
]
configure(springProjects) {
    group = "system"
    version = "unspecified"

    apply {
        plugin("java")
        plugin("java-library")
        plugin("org.springframework.boot")
        plugin("io.spring.dependency-management")
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        implementation ("org.springframework.boot:spring-boot-starter-aop")
        implementation ("org.springframework.boot:spring-boot-starter-web")
        implementation ("org.springframework.boot:spring-boot-starter-security")
        implementation ("org.springframework.boot:spring-boot-starter-thymeleaf")
        implementation ("org.springframework.boot:spring-boot-starter-validation")
        implementation ("org.thymeleaf.extras:thymeleaf-extras-springsecurity5")
        implementation ("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect")
        implementation ("commons-io:commons-io:${commonsIo}")
        implementation ("org.apache.commons:commons-text:${commonsText}")
        implementation ("org.apache.commons:commons-lang3:${commonsLang3}")
        testImplementation ("org.springframework.boot:spring-boot-starter-test")
        testImplementation ("org.springframework.security:spring-security-test")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        implementation ("org.projectlombok:lombok")
        annotationProcessor ("org.projectlombok:lombok")
        testImplementation ("org.projectlombok:lombok")
        testAnnotationProcessor ("org.projectlombok:lombok")
    }
}

/**
 * JPA 프로젝트 의존성 설정
 */
def jpaProjects = [
    project(":module-core"),
    project(":module-remote"),
]
configure(jpaProjects) {
    group = "system"
    version = "unspecified"

    apply {
        plugin("java")
        plugin("java-library")
        plugin("org.springframework.boot")
        plugin("io.spring.dependency-management")
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        runtimeOnly ("org.mariadb.jdbc:mariadb-java-client")
        implementation ("org.springframework.boot:spring-boot-starter-data-jpa")
        implementation ("com.querydsl:querydsl-jpa:${querydsl}")
        implementation ("com.querydsl:querydsl-apt:${querydsl}")
        implementation ("com.querydsl:querydsl-core:${querydsl}")
        annotationProcessor ("com.querydsl:querydsl-apt:${querydsl}:jpa")
        annotationProcessor ("jakarta.annotation:jakarta.annotation-api")
        annotationProcessor ("jakarta.persistence:jakarta.persistence-api")
    }
}

/**
 * Core 프로젝트 모듈 설정
 */
project(":module-core") {
    jar {
        enabled = false
    }
    bootJar {
        enabled = true
        archiveFileName = "module-core.jar"
    }
    dependencies {
        implementation ("com.cronutils:cron-utils:${cronUtils}")
        implementation ("org.springframework.boot:spring-boot-starter-quartz")
    }
    compileJava {
        options.compilerArgs += ["--enable-preview"]
    }
    compileTestJava {
        options.compilerArgs += ["--enable-preview"]
    }
    tasks.named("test") {
        useJUnitPlatform()
        jvmArgs(["--enable-preview"])
    }
    task deployJar(type: Copy, dependsOn: bootJar) { // .jar 파일 복사
        from("$buildDir/libs/module-core.jar")
        into("$buildDir")
    }
}

/**
 * Remote 프로젝트 모듈 설정
 */
project(":module-remote") {
    jar {
        enabled = true
        archiveFileName = "module-remote.jar"
    }
    bootJar {
        enabled = false
    }
    dependencies {
        api project(":module-core")
        implementation ("com.cronutils:cron-utils:${cronUtils}")
        implementation ("org.springframework.boot:spring-boot-starter-quartz")
    }
    compileJava {
        options.compilerArgs += ["--enable-preview"]
    }
    compileTestJava {
        options.compilerArgs += ["--enable-preview"]
    }
    tasks.named("test") {
        useJUnitPlatform()
        jvmArgs(["--enable-preview"])
    }
    task deployJar(type: Copy, dependsOn: jar) { // .jar 파일 복사
        from("$buildDir/libs/module-remote.jar")
        into("$buildDir")
    }
}
